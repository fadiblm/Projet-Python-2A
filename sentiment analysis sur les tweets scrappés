{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "50fb662c",
   "metadata": {},
   "source": [
    "# Téléchargement des bases de données"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "686788d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on telecharge les bases de données issues du scrapping twitter\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f29e83a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "data2021 = pd.read_csv(\"50 000 tweets scrappés en 2021 sur les catastrophes naturelles.csv\")\n",
    "data2016 = pd.read_csv(\"50 000 tweets scrappés en 2016 sur les catastrophes naturelles .csv\", lineterminator='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ece4450",
   "metadata": {},
   "source": [
    "# réalisation de l'analyse de sentiment sur les tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "aef2a2d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     /Users/ava/nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                    Text    neg    neu    pos  \\\n",
      "0      @gregkellyusa I'm confused. Which natural disa...  0.335  0.471  0.194   \n",
      "1                            @moby_real Natural disaster  0.539  0.132  0.329   \n",
      "2      Over the years more than one governor was on v...  0.156  0.747  0.097   \n",
      "3      @TreadOnMeDezza @KeepitGreat912 she went to mi...  0.197  0.661  0.143   \n",
      "4      @WillyDoityeah @gregkellyusa He does have real...  0.084  0.697  0.219   \n",
      "...                                                  ...    ...    ...    ...   \n",
      "48211  i mostly watched horror movies, natural disast...  0.451  0.405  0.145   \n",
      "48212  .@Alexgibneyfilm's latest documentary examines...  0.168  0.678  0.154   \n",
      "48213  @AdorablePodcast @1Quetzalcoatl1 @Vickie627 @Q...  0.132  0.805  0.063   \n",
      "48214  @ResearchBuzz I appreciate you not considering...  0.458  0.352  0.190   \n",
      "48215  Globally, the five-year period ending in 2020 ...  0.154  0.752  0.094   \n",
      "\n",
      "       compound                       date  \n",
      "0       -0.5719  2021-12-31 23:51:37+00:00  \n",
      "1       -0.3818  2021-12-31 23:44:09+00:00  \n",
      "2       -0.5550  2021-12-31 23:42:16+00:00  \n",
      "3       -0.6808  2021-12-31 23:41:33+00:00  \n",
      "4        0.6788  2021-12-31 23:38:21+00:00  \n",
      "...         ...                        ...  \n",
      "48211   -0.7430  2021-07-24 14:11:04+00:00  \n",
      "48212   -0.4019  2021-07-24 14:06:06+00:00  \n",
      "48213   -0.8494  2021-07-24 14:03:24+00:00  \n",
      "48214   -0.5862  2021-07-24 13:56:05+00:00  \n",
      "48215   -0.3818  2021-07-24 13:53:41+00:00  \n",
      "\n",
      "[48216 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "#calcul de l'analyse de sentiment sur les tweets de l'année 2021\n",
    "import nltk\n",
    "nltk.download('vader_lexicon')\n",
    "\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "sentiment=SentimentIntensityAnalyzer()\n",
    "# compound score= somme des scores positifs, négatifs et neutres qui sont normalisés entre -1 (valeur négative la + extrême) et +1 (valeur positive la plus extrême)\n",
    "\n",
    "dict2021 = dict()\n",
    "for k in data2021['Text']:\n",
    "    dict2021[k] = sentiment.polarity_scores(k)\n",
    "\n",
    "#on store les valeurs du dictionnaire dans différentes listes\n",
    "list_neg = []\n",
    "list_pos = []\n",
    "list_neu = []\n",
    "list_compound = []\n",
    "\n",
    "\n",
    "for item in dict2021.values():\n",
    "  list_neg.append(item[\"neg\"])\n",
    "  list_neu.append(item[\"neu\"])\n",
    "  list_pos.append(item[\"pos\"])\n",
    "  list_compound.append(item[\"compound\"])\n",
    "\n",
    "#on finit de créer le dataframe qui contient toutes les nouvelles valeurs du sentiment analysis\n",
    "import pandas as pd\n",
    "df2021new = pd.DataFrame(list(zip(list_neg, list_neu, list_pos,list_compound)), columns =['neg', 'neu','pos','compound'])\n",
    "df2021new.insert(0, 'Text', dict2021.keys())\n",
    "df2021new.insert(5,'date', data2021['Datetime'])\n",
    "print(df2021new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "42ec627f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                                    Text    neg    neu    pos  \\\n",
      "0       I love natural disaster movies. I'm such a dork.  0.401  0.185  0.414   \n",
      "1      Natural disaster: 4.3-magnitude quake shakes I...  0.301  0.515  0.184   \n",
      "2      @Scotty_Noodle I've been hearing about that. S...  0.385  0.532  0.083   \n",
      "3      #NowPlaying Molly Moore - Natural Disaster (Wi...  0.232  0.452  0.316   \n",
      "4      43% of U.S. Homes At Risk From “Natural” Disas...  0.259  0.628  0.113   \n",
      "...                                                  ...    ...    ...    ...   \n",
      "46165  Are We Heading To A Natural Disaster  http://t...  0.325  0.476  0.198   \n",
      "46166  Just loved Molly Moore - Natural Disaster http...  0.248  0.364  0.388   \n",
      "46167  2. Then nature will do that whole natural disa...  0.331  0.573  0.096   \n",
      "46168  Forget #naturaldisaster movies, #volcanoes are...  0.337  0.663  0.000   \n",
      "46169  Storm of the Century: Another Natural Disaster...  0.263  0.577  0.160   \n",
      "\n",
      "       compound                       date  \n",
      "0        0.0516  2015-12-31 23:39:34+00:00  \n",
      "1       -0.3818  2015-12-31 23:33:20+00:00  \n",
      "2       -0.8777  2015-12-31 23:27:47+00:00  \n",
      "3        0.1280  2015-12-31 23:25:01+00:00  \n",
      "4       -0.5420  2015-12-31 23:21:52+00:00  \n",
      "...         ...                        ...  \n",
      "46165   -0.3818  2015-04-30 14:03:25+00:00  \n",
      "46166    0.3182  2015-04-30 14:02:42+00:00  \n",
      "46167   -0.8006  2015-04-30 14:02:38+00:00  \n",
      "46168   -0.7263  2015-04-30 13:52:18+00:00  \n",
      "46169   -0.3818  2015-04-30 13:50:02+00:00  \n",
      "\n",
      "[46170 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "#calcul de l'analyse de sentiment sur les tweets de l'année 2016\n",
    "\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "sentiment=SentimentIntensityAnalyzer()\n",
    "# compound score= somme des scores positifs, négatifs et neutres qui sont normalisés entre -1 (valeur négative la + extrême) et +1 (valeur positive la plus extrême)\n",
    "\n",
    "dict20 = dict()\n",
    "for k in data2016['Text']:\n",
    "    dict2016[k] = sentiment.polarity_scores(k)\n",
    "\n",
    "#on store les valeurs du dictionnaire dans différentes listes\n",
    "list_neg = []\n",
    "list_pos = []\n",
    "list_neu = []\n",
    "list_compound = []\n",
    "\n",
    "\n",
    "for item in dict2016.values():\n",
    "  list_neg.append(item[\"neg\"])\n",
    "  list_neu.append(item[\"neu\"])\n",
    "  list_pos.append(item[\"pos\"])\n",
    "  list_compound.append(item[\"compound\"])\n",
    "\n",
    "#on finit de créer le dataframe qui contient toutes les nouvelles valeurs du sentiment analysis\n",
    "import pandas as pd\n",
    "df2016new = pd.DataFrame(list(zip(list_neg, list_neu, list_pos,list_compound)), columns =['neg', 'neu','pos','compound'])\n",
    "df2016new.insert(0, 'Text', dict2016.keys())\n",
    "df2016new.insert(5,'date', data2016['Datetime'])\n",
    "print(df2016new)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "448b48fd",
   "metadata": {},
   "source": [
    "# Cleaning du dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "9752665d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#netoyons le dataset en enlevant tous les tweets dont la neutralité est trop importante\n",
    "#un tweet majoritairement neutre n'est pas d'une grande utilité dans une analyse de sentiment\n",
    "\n",
    "df2016new = df2016new[df2016new.compound != 0.0]\n",
    "df2016new = df2016new[df2016new.neu < 0.4]\n",
    "\n",
    "\n",
    "df2021new = df2021new[df2021new.compound != 0.0]\n",
    "df2021new = df2021new[df2021new.neu < 0.4]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "591912c8",
   "metadata": {},
   "source": [
    "# Préparation des graphes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e174527d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.29402422907488984\n"
     ]
    }
   ],
   "source": [
    "#calcul de la positivité,négativité et neutralité moyenne des tweets de l'année 2016\n",
    "import statistics \n",
    "x = statistics.mean(df2016new['pos']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5de2a393",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3953118313404657\n"
     ]
    }
   ],
   "source": [
    "import statistics \n",
    "x = statistics.mean(df2016new['neg']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8e31f41e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3105838577721838\n"
     ]
    }
   ],
   "source": [
    "import statistics \n",
    "x = statistics.mean(df2016new['neu']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d2ab9687",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2871684378320935\n"
     ]
    }
   ],
   "source": [
    "#calcul de la positivité,négativité et neutralité moyenne des tweets de l'année 2021\n",
    "import statistics \n",
    "x = statistics.mean(df2021new['pos']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f33ab863",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.41296041445270987\n"
     ]
    }
   ],
   "source": [
    "#calcul de la positivité,négativité et neutralité moyenne des tweets de l'année 2021\n",
    "import statistics \n",
    "x = statistics.mean(df2021new['neg']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0333562c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2998738044633369\n"
     ]
    }
   ],
   "source": [
    "#calcul de la positivité,négativité et neutralité moyenne des tweets de l'année 2021\n",
    "import statistics \n",
    "x = statistics.mean(df2021new['neu']) \n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "30238435",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "labels = 'positivity','neutrality',  'negativity'\n",
    "sizes = [29.402422907488984, 39.53118313404657, 31.05838577721838]\n",
    "colors = ['aqua','lightskyblue','cadetblue']\n",
    "plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\n",
    "plt.axis('equal')\n",
    "plt.savefig('PieChart01.png')\n",
    "plt.title(\"Pourcentage de positivité, negativité et neutralité sur les catastrophes naturelles par tweets en 2016 \", fontsize = 14) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cdf803fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "labels = 'positivity','neutrality',  'negativity'\n",
    "sizes = [28.716843783209354, 41.296041445270987, 29.98738044633369]\n",
    "colors = ['aqua','lightskyblue','cadetblue']\n",
    "plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=90)\n",
    "plt.axis('equal')\n",
    "plt.savefig('PieChart01.png')\n",
    "plt.title(\"Pourcentage de positivité, negativité et neutralité sur les catastrophes naturelles par tweets en 2021 \", fontsize = 14) \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a4cb54a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#on remarque ainsi que malgré une médiatisation croissante des catastrophes naturelles et leur multiplication sur les 5 dernières années\n",
    "#on n'observe pas pour autant visiblement d'augmentation significative de l'inquiétude envers les catastrophes naturelles\n",
    "\n",
    "#bien sûr, nous ne nions pas les biais de l'analyse de sentiment ni bien sûr les biais d'une analyse sur twitter\n",
    "#en effet, twitter n'est pas un échantillion représentatif de l'ensemble des opinions des individus à travers le monde\n",
    "#il est donc possible voir probable que malgré les résultats trouvés il y ait eu sur la période une augmentation de l'inquiétude des individus vis-à-vis des catastrophes naturelles"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
